# Add a CHANGELOG entry for app changes
if !git.modified_files.include?("CHANGELOG.md") && has_app_changes
  fail("Please include a CHANGELOG entry. \nYou can find it at [CHANGELOG.md](https://github.com/realm/jazzy/blob/master/CHANGELOG.md).")
  message "Note, we hard-wrap at 80 chars and use 2 spaces after the last line."
end

# Look for prose issues
prose.lint_files markdown_files

# Look for spelling issues
prose.ignored_words = ["orta", "artsy", "cocoapods"]
prose.check_spelling markdown_files

# Ensure a clean commits history
if git.commits.any? { |c| c.message =~ /^Merge branch/ }
  fail('Please rebase to get rid of the merge commits in this PR')
end

# Don't let testing shortcuts get into master by accident
fail("fit left in tests") if `grep -r "fit" tests/`.length > 1

username = ENV['CIRCLE_PROJECT_USERNAME']
project_name = ENV['CIRCLE_PROJECT_REPONAME']
build_number = ENV['CIRCLE_BUILD_NUM']
if username && project_name && build_number
  # submit message giving the coverage report that was generated by coverage.py
  message('[html coverage report](https://circleci.com/api/v1/project/'+username+'/'+project_name+'/'+build_number+'/artifacts/0/$CIRCLE_ARTIFACTS/htmlcov/index.html)')
end

# Did you make analytics changes? Well you should also include a change to our analytics spec
made_analytics_changes = modified_files.include?("ansible.cfg")
made_analytics_specs_changes = modified_files.include?("README.md")
if made_analytics_changes
    fail("Analytics changes should have reflected specs changes") if !made_analytics_specs_changes

    # And pay extra attention anyway
    message('Analytics dict changed, double check for ?: `@""` on new entries')
    message('Also, double check the [Troubleshooting Guide](#) if the changes are non-trivial.')
end

warn "#{gitlab.html_link("meta/main.yml")} was edited." if git.modified_files.include? "meta/main.yml"

if git.modified_files.include? "defaults/*"
  default_files = git.modified_files.select { |path| path.include? "defaults/*" }
  message "This merge-request changes #{ gitlab.html_link(default_files) }"
end

if git.modified_files.include? "files/group_vars/*"
  group_vars_files = git.modified_files.select { |path| path.include? "files/group_vars/*" }
  message "This merge-request changes #{ gitlab.html_link(group_vars_files) }"
end

message "Welcome, #{ username } #{ gitlab.mr_author }."

# Sometimes its a README fix, or something like that - which isn't relevant for
# including in a CHANGELOG for example
has_app_changes = !git.modified_files.grep(/tasks/).empty?
has_test_changes = !git.modified_files.grep(/test/).empty?
has_molecule_changes = !git.modified_files.grep(/molecule/).empty?
is_version_bump = git.modified_files.sort == ["CHANGELOG.md", "meta/main.yml"].sort

if has_app_changes && !has_test_changes && !is_version_bump
  warn("Tests were not updated", sticky: false)
end

# Thanks other people!
message(":tada:") if is_version_bump && github.pr_author != "integration"

# Make a note about contributors not in the organization
unless github.api.organization_member?("danger", github.pr_author)
  # Pay extra attention if they modify the gemspec
  if git.modified_files.include?("*.gemspec")
    warn "External contributor has edited the Gemspec"
  end
end

can_merge = gitlab.mr_json["mergeable"]
warn("This merge-request cannot be merged yet.") unless can_merge

has_milestone = gitlab.mr_json["milestone"] != nil
warn("This merge-request does not refer to an existing milestone", sticky: true) unless has_milestone

failure "Please re-submit this merge-request from #{ gitlab.branch_for_merge } to #{ ENV['CI_DEFAULT_BRANCH'] } , we may have already fixed your issue." if gitlab.branch_for_merge != "#{ ENV['CI_DEFAULT_BRANCH'] }"

failure "Please provide a summary in the merge-request description" if gitlab.mr_body.length < 5

warn "This merge-request does not have any assignees yet." unless gitlab.mr_json["assignee"]

failure "Please add labels to this merge-request" if gitlab.mr_labels.empty?

declared_trivial = (gitlab.mr_title + gitlab.mr_body).include?("#trivial")

warn "merge-request is classed as Work in Progress" if gitlab.mr_title.include? "[WIP]"

# Runs a linter with all styles, on modified and added markdown files in this merge-request
prose.ignored_words = ["ansible", "elasticsearch"]
prose.lint_files if prose.proselint_installed
prose.check_spelling "*.md" if prose.mdspell_installed

if !core_lint_output.include?("100.00%")
  # fail "The core plugins are not at 100% doc'd - see below:", sticky: false
  # markdown "```\n#{core_lint_output}```"
elsif core_lint_output.include? "warning"
  warn "The core plugins are have yard warnings - see below", sticky: false
  markdown "```\n#{core_lint_output}```"
end


# Request a CHANGELOG entry, and give an example
has_app_changes = !git.modified_files.grep(/lib/).empty?
if !git.modified_files.include?('CHANGELOG.md') && has_app_changes
  warn("Please include a CHANGELOG entry to credit yourself! \nYou can find it at [CHANGELOG.md](#{ ENV['CI_PROJECT_URL'] }/master/CHANGELOG.md).", :sticky => false)
  markdown <<-MARKDOWN
Here's an example of your CHANGELOG entry:

```markdown
* #{github.pr_title}\s\s
  [#{github.pr_author}](#{ENV['CI_REPOSITORY_URL']})
  [#issue_number](#{CI_PROJECT_URL}/issues/issue_number)
```

*note*: There are two invisible spaces after the entry's text.
MARKDOWN
end

# Warn when there is a big PR
warn('Big Merge-Request') if git.lines_of_code > @SDM_DANGER_BIG_PR_LINES



junit.parse "junit-results.xml"
junit.show_skipped_tests = true
junit.headers = %i(file name)
all_test = junit.tests.map(&:attributes)
slowest_test = sort_by { |attributes| attributes[:time].to_f }.last
message "#{slowest_test[:time]} took #{slowest_test[:time]} seconds"
junit.report

# Find maximum two reviewers
mention.run(2, [], [])

rb pep8.lint

shellcheck.report 'shellcheck.json'

simplecov.report 'coverage/coverage.json'

ruby slack.notify(channel: '#integration')
ruby slack.notify(channel: '#integration', text: 'hello danger')

suggester.suggest

todoist.message = "Please fix all TODOS"
todoist.warn_for_todos
todoist.print_todos_table

#
# ** FILE CHECKS **
# Checks for certain rules and warns if needed.
# Some rules can be disabled by using // danger:disable rule_name
#
# Rules:
# - Check to see if any of the modified or added files contains a class which isn't indicated as final (final_class)
# - Check for large files without any // MARK:
# - Check for the usage of unowned self. We rather like to use weak self to be safe.
# - Check for override methods which only implement super calls. These can be removed.
# - Check for public properties or methods which aren't documented (public_docs)

# Sometimes an added file is also counted as modified. We want the files to be checked only once.
files_to_check = (git.modified_files + git.added_files).uniq
(files_to_check - %w(Dangerfile)).each do |file|
	next unless File.file?(file)
	# Only check for classes inside swift files
	next unless File.extname(file).include?(".swift")

  	# Will be used to check if we're inside a comment block.
	isCommentBlock = false

	# Will be used to track if we've placed any marks inside our class.
	foundMark = false

	# Collects all disabled rules for this file.
	disabled_rules = []

	filelines = File.readlines(file)
	filelines.each_with_index do |line, index|
		if isCommentBlock
			if line.include?("*/")
				isCommentBlock = false
			end
		elsif line.include?("/*")
			isCommentBlock = true
		elsif line.include?("danger:disable")
			rule_to_disable = line.split.last
			disabled_rules.push(rule_to_disable)
		else
			# Start our custom line checks
			## Check for the usage of final class
			if disabled_rules.include?("final_class") == false and line.include?("class") and not line.include?("final") and not line.include?("func") and not line.include?("//") and not line.include?("protocol")
				warn("Consider using final for this class or use a struct (final_class)", file: file, line: index+1)
			end

			## Check for the usage of unowned self
			if line.include?("unowned self")
				warn("It's safer to use weak instead of unowned", file: file, line: index+1)
			end

			## Check for methods that only call the super class' method
			if line.include?("override") and line.include?("func") and filelines[index+1].include?("super") and filelines[index+2].include?("}")
				warn("Override methods which only call super can be removed", file: file, line: index+3)
			end

			## Check if our line includes a MARK:
			if line.include?("MARK:") and line.include?("//")
				foundMark = true
			end

			## Check for public properties which aren't commented
			if disabled_rules.include?("public_docs") == false and lineContainsPublicPropertyMethodClassOrStruct(line) && lineIncludesDocumentComment(filelines[index-1]) == false
				warn("Public properties, methods, classes or structs should be documented. Make use of `///` or `/* */` so it will show up inside the docs. (public_docs)", file: file, line: index+1)
			end
		end
	end

	## Check wether our file is larger than 200 lines and doesn't include any Marks
	if filelines.count > 200 and foundMark == false
		warn("Consider to place some `MARK:` lines for files over 200 lines big.")
	end
end

# Remove "Orange Label" from this Pull Request
auto_label.remove("Orange Label")

# Remove "Orange Label" from this Repository (use with caution!)
auto_label.delete("Orange Label")

# Add "Orange Label" with orange color to this Pull Request
# Note: will create label if it does not exist
pr_number = github.pr_json["number"]
auto_label.set(pr_number, "Orange Label", "ff8800")

# Add "WIP" label to this Pull Request
pr_number = github.pr_json["number"]
auto_label.wip=(pr_number)

changelog.format = :keep_a_changelog
changelog.filename = 'CHANGELOG.md'
changelog.placeholder_line = "* Your change here.\n"
changelog.ignore_files = ['README.md', 'UPGRADING.md', /\.txt$/]

code_coverage.report(sort: :ascending)
code_coverage.report(
    auth_user: "jenkins",
    auth_token: "MY_TOKEN"
)

commit_lint.check warn: :all

findbugs.gradle_task = "app:findbugs" #defalut: findbugs
findbugs.report_file = "app/build/reports/findbugs/findbugs.xml"
findbugs.report